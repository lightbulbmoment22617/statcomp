# Now to plot the original data and prediction
newdata <- data.frame(z=-10:20)
newdata$y <- predict(mod, newdata=newdata)
plot(newdata$z, newdata$y, "l", col="red")
points(data$z, data$y)
abline(0, 2)
?points
points(data$z, data$y, bg="black")
plot(newdata$z, newdata$y, "l", col="red")
points(data$z, data$y, pch=16)
abline(0, 2)
rm(list=ls())
source('~/StatComp/labs/lab1.R', echo=TRUE)
pred <- predict(mod, newdata, interval="prediction")
str(pred)
View(pred)
?lines
View(pred)
# Now we want to plot with prediction intervals
pred <- predict(mod, newdata, interval="prediction")
plot(newdata$z, pred$fit, "l", ylim=range(pred))
lines(newdata$z, pred$lwr, lty=2)
lines(newdata$z, pred$upr, lty=2)
points(data$z, data$y, pch=20)
abline(0, 2, col=2)
pred["fit"]
pred[,"fit"]
# Now we want to plot with prediction intervals
pred <- predict(mod, newdata, interval="prediction")
plot(newdata$z, pred[,"fit"], "l", ylim=range(pred))
lines(newdata$z, pred[,"lwr"], lty=2)
lines(newdata$z, pred[,"upr"], lty=2)
points(data$z, data$y, pch=20)
abline(0, 2, col=2)
plot_predictions(mod, newdata, xname="z")
points(data$z, data$y, pch=20)
abline(0,2,col=2)
# Function to redo this analysis with new models
plot_predictions <- function(x, newdata, xname="x") {
pred <- predict(x, newdata, interval="prediction")
ylim <- range(pred)
plot(newdata$xname, pred[,"fit"], "l", ylim=ylim)
lines(newdata$xname, pred[,"lwr"], lty=2)
lines(newdata$xname, pred[,"upr"], lty=2)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z")
points(data$z, data$y, pch=20)
abline(0,2,col=2)
rm(list=ls())
# Generate synthetic data
z <- rep(1:10, times = 10)
data <- data.frame(z=z, y=2*z+rnorm(length(z), sd=4))
newdata <- data.frame(z=-10:20)
mod <- lm(y~z, data=data)
plot_predictions <- function(x, newdata, xname="x") {
pred <- predict(x, newdata, interval="prediction")
ylim <- range(pred)
plot(newdata$xname, pred[,"fit"], "l", ylim=ylim)
lines(newdata$xname, pred[,"lwr"], lty=2)
lines(newdata$xname, pred[,"upr"], lty=2)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z")
plot_predictions <- function(x, newdata, xname="x") {
pred <- predict(x, newdata, interval="prediction")
ylim <- range(pred)
#plot(newdata$xname, pred[,"fit"], "l", ylim=ylim)
#lines(newdata$xname, pred[,"lwr"], lty=2)
#lines(newdata$xname, pred[,"upr"], lty=2)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z")
plot_predictions <- function(x, newdata, xname="x") {
pred <- predict(x, newdata, interval="prediction")
ylim <- range(pred)
plot(newdata$xname, pred[,"fit"], "l", ylim=ylim)
#lines(newdata$xname, pred[,"lwr"], lty=2)
#lines(newdata$xname, pred[,"upr"], lty=2)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z")
?predict
plot_predictions <- function(x, newdata, xname="x") {
pred <- predict(object=x, newdata, interval="prediction")
ylim <- range(pred)
plot(newdata$xname, pred[,"fit"], "l", ylim=ylim)
#lines(newdata$xname, pred[,"lwr"], lty=2)
#lines(newdata$xname, pred[,"upr"], lty=2)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z")
View(newdata)
# Now we want to plot with prediction intervals
pred <- predict(mod, newdata, interval="prediction")
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z")
plot_predictions <- function(x, newdata, xname="x") {
pred <- predict(x, newdata, interval="prediction")
ylim <- range(pred)
plot(newdata[xname], pred[,"fit"], "l", ylim=ylim)
#lines(newdata$xname, pred[,"lwr"], lty=2)
#lines(newdata$xname, pred[,"upr"], lty=2)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z")
newdata["z"]
xname = "z"
newdata[xname]
rm(list=ls())
# Generate synthetic data
z <- rep(1:10, times = 10)
data <- data.frame(z=z, y=2*z+rnorm(length(z), sd=4))
# Plot the data
plot(data$z, data$y)
# Estimate a linear model
mod <- lm(y~z, data=data)
# Now to plot the original data and prediction
newdata <- data.frame(z=-10:20)
plot(newdata$z, predict(mod, newdata), "l")
points(data$z, data$y, pch=20)
abline(0, 2, col=2)
# Now we want to plot with prediction intervals
pred <- predict(mod, newdata, interval="prediction")
plot(newdata$z, pred[,"fit"], "l", ylim=range(pred))
lines(newdata$z, pred[,"lwr"], lty=2)
lines(newdata$z, pred[,"upr"], lty=2)
points(data$z, data$y, pch=20)
abline(0, 2, col=2)
# Function to redo this analysis with new models
plot_predictions <- function(x, newdata, xname="x") {
pred <- predict(x, newdata, interval="prediction")
ylim <- range(pred)
plot(newdata[xname], pred[,"fit"], "l", ylim=ylim)
#lines(newdata$xname, pred[,"lwr"], lty=2)
#lines(newdata$xname, pred[,"upr"], lty=2)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z")
points(data$z, data$y, pch=20)
abline(0,2,col=2)
# Function to redo this analysis with new models
plot_predictions <- function(x, newdata, xname="x") {
pred <- predict(x, newdata, interval="prediction")
ylim <- range(pred)
plot(newdata[[xname]], pred[,"fit"], "l", ylim=ylim)
lines(newdata[[xname]], pred[,"lwr"], lty=2)
lines(newdata[[xname]], pred[,"upr"], lty=2)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z")
points(data$z, data$y, pch=20)
abline(0,2,col=2)
rm(list=ls())
# Generate synthetic data
z <- rep(1:10, times = 10)
data <- data.frame(z=z, y=2*z+rnorm(length(z), sd=4))
# Plot the data
plot(data$z, data$y)
# Estimate a linear model
mod <- lm(y~z, data=data)
# Now to plot the original data and prediction
newdata <- data.frame(z=-10:20)
plot(newdata$z, predict(mod, newdata), "l")
points(data$z, data$y, pch=20)
abline(0, 2, col=2)
# Now we want to plot with prediction intervals
pred <- predict(mod, newdata, interval="prediction")
plot(newdata$z, pred[,"fit"], "l", ylim=range(pred))
lines(newdata$z, pred[,"lwr"], lty=2)
lines(newdata$z, pred[,"upr"], lty=2)
points(data$z, data$y, pch=20)
abline(0, 2, col=2)
# Function to redo this analysis with new models
plot_predictions <- function(x, newdata, xname="x") {
pred <- predict(x, newdata, interval="prediction")
ylim <- range(pred)
plot(newdata[[xname]], pred[,"fit"], "l", ylim=ylim)
lines(newdata[[xname]], pred[,"lwr"], lty=2)
lines(newdata[[xname]], pred[,"upr"], lty=2)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z")
points(data$z, data$y, pch=20)
abline(0,2,col=2)
# Function to redo this analysis with new models
plot_predictions <- function(x, newdata, xname="x", ...) {
pred <- predict(x, newdata, interval="prediction")
ylim <- range(pred)
plot(newdata[[xname]], pred[,"fit"], "l", ylim=ylim, ...)
lines(newdata[[xname]], pred[,"lwr"], lty=2)
lines(newdata[[xname]], pred[,"upr"], lty=2)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z", xlab="z", ylab="y")
points(data$z, data$y, pch=20)
abline(0,2,col=2)
mod <- lm(y~1+z+I(z^2), data)
plot_predictions(mod, newdata, xname="z", xlab="z", ylab="y")
points(data$z, data$y, pch=20)
abline(0,2,col=2)
rm(list=ls())
z <- rep(1:10, times = 10)
data <- data.frame(z=z, y=2*z+rnorm(length(z), sd=4))
# Now to plot the original data and prediction
newdata <- data.frame(z=-10:20)
plot_predictions <- function(x, newdata, xname="x", ...) {
pred <- predict(x, newdata, interval="prediction")
ylim <- range(pred)
plot(newdata[[xname]], pred[,"fit"], "l", ylim=ylim, ...)
lines(newdata[[xname]], pred[,"lwr"], lty=2)
lines(newdata[[xname]], pred[,"upr"], lty=2)
}
# Testing the new function on a quadratic model
mod <- lm(y~1+z+I(z^2), data)
plot_predictions(mod, newdata, xname="z", xlab="z", ylab="y")
newdata <- data.frame(z=-10:20)
mod <- lm(y~1+z+I(z^2), data)
plot_predictions(mod, newdata, xname="z", xlab="z", ylab="y")
points(data$z, data$y, pch=20)
abline(0,2,col=2)
newdata <- data.frame(z=-10:20)
plot(newdata$z, predict(mod, newdata), "l")
points(data$z, data$y, pch=20)
abline(0, 2, col=2)
# Now we want to plot with prediction intervals
pred <- predict(mod, newdata, interval="prediction")
plot(newdata$z, pred[,"fit"], "l", ylim=range(pred))
lines(newdata$z, pred[,"lwr"], lty=2)
lines(newdata$z, pred[,"upr"], lty=2)
points(data$z, data$y, pch=20)
abline(0, 2, col=2)
# Function to redo this analysis with new models
plot_predictions <- function(x, newdata, xname="x", ylim=NULL, xlab=NULL, ...) {
pred <- predict(x, newdata, interval="prediction")
if (is.null(ylim)) {ylim <- range(pred)}
if (is.null(xlab)) {xlab <- xname}
plot(newdata[[xname]], pred[,"fit"], type="l", ylim=ylim, xlab=xlab,...)
lines(newdata[[xname]], pred[,"lwr"], lty=2)
lines(newdata[[xname]], pred[,"upr"], lty=2)
pred <- predict(x, newdata, interval="confidence")
lines(newdata[[xname]], pred[,"lwr"], lty=3)
lines(newdata[[xname]], pred[,"upr"], lty=3)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z", xlab="z", ylab="y")
points(data$z, data$y, pch=20)
abline(0,2,col=2)
rm(list=ls())
# Generate synthetic data
z <- rep(1:10, times = 10)
data <- data.frame(z=z, y=2*z+rnorm(length(z), sd=4))
# Plot the data
plot(data$z, data$y)
# Estimate a linear model
mod <- lm(y~z, data=data)
# Now to plot the original data and prediction
newdata <- data.frame(z=-10:20)
plot(newdata$z, predict(mod, newdata), "l")
points(data$z, data$y, pch=20)
abline(0, 2, col=2)
# Now we want to plot with prediction intervals
pred <- predict(mod, newdata, interval="prediction")
plot(newdata$z, pred[,"fit"], "l", ylim=range(pred))
lines(newdata$z, pred[,"lwr"], lty=2)
lines(newdata$z, pred[,"upr"], lty=2)
points(data$z, data$y, pch=20)
abline(0, 2, col=2)
# Function to redo this analysis with new models
plot_predictions <- function(x, newdata, xname="x", ylim=NULL, xlab=NULL, ...) {
pred <- predict(x, newdata, interval="prediction")
if (is.null(ylim)) {ylim <- range(pred)}
if (is.null(xlab)) {xlab <- xname}
plot(newdata[[xname]], pred[,"fit"], type="l", ylim=ylim, xlab=xlab,...)
lines(newdata[[xname]], pred[,"lwr"], lty=2)
lines(newdata[[xname]], pred[,"upr"], lty=2)
pred <- predict(x, newdata, interval="confidence")
lines(newdata[[xname]], pred[,"lwr"], lty=3)
lines(newdata[[xname]], pred[,"upr"], lty=3)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z", xlab="z", ylab="y")
points(data$z, data$y, pch=20)
abline(0,2,col=2)
rm(list=ls())
# Generate synthetic data
z <- rep(1:10, times = 10)
data <- data.frame(z=z, y=2*z+rnorm(length(z), sd=4))
# Plot the data
plot(data$z, data$y)
# Plot the data
plot(data$z, data$y)
# Estimate a linear model
mod <- lm(y~z, data=data)
# Now to plot the original data and prediction
newdata <- data.frame(z=-10:20)
plot(newdata$z, predict(mod, newdata), "l")
points(data$z, data$y, pch=20)
abline(0, 2, col=2)
# Now we want to plot with prediction intervals
pred <- predict(mod, newdata, interval="prediction")
plot(newdata$z, pred[,"fit"], "l", ylim=range(pred))
lines(newdata$z, pred[,"lwr"], lty=2)
lines(newdata$z, pred[,"upr"], lty=2)
points(data$z, data$y, pch=20)
abline(0, 2, col=2)
# Function to redo this analysis with new models
plot_predictions <- function(x, newdata, xname="x", ylim=NULL, xlab=NULL, ...) {
pred <- predict(x, newdata, interval="prediction")
if (is.null(ylim)) {ylim <- range(pred)}
if (is.null(xlab)) {xlab <- xname}
plot(newdata[[xname]], pred[,"fit"], type="l", ylim=ylim, xlab=xlab,...)
lines(newdata[[xname]], pred[,"lwr"], lty=2)
lines(newdata[[xname]], pred[,"upr"], lty=2)
pred <- predict(x, newdata, interval="confidence")
lines(newdata[[xname]], pred[,"lwr"], lty=3)
lines(newdata[[xname]], pred[,"upr"], lty=3)
}
# This should regenerate the previous figure
plot_predictions(mod, newdata, xname="z", xlab="z", ylab="y")
points(data$z, data$y, pch=20)
abline(0,2,col=2)
# Testing the new function on a quadratic model
newdata <- data.frame(z=-10:20)
mod <- lm(y~1+z+I(z^2), data)
plot_predictions(mod, newdata, xname="z", xlab="z", ylab="y")
points(data$z, data$y, pch=20)
abline(0,2,col=2)
formulas <- c(y~1,
y~z,
y~z + I(z^2),
y~z + I(z^2), + I(z^3))
mods <- lapply(formulas, function(x) lm(x, data))
mods <- lapply(formulas, function(mod) lm(mod, data))
mods <- lapply(formulas, function(mod) lm(mod, data=data))
formulas <- c(y ~ 1,
y ~ z,
y ~ z + I(z^2),
y ~ z + I(z^2), + I(z^3))
mods <- lapply(formulas, function(mod) lm(mod, data))
formulas[0]
formulas[1]
lm(formulas[1], data)
lm(formulas[2], data)
rm(list=ls())
source('~/StatComp/labs/lab1.R', echo=TRUE)
lm(y~1, data)
lm(y~z, data)
formulas[2]
formulas <- c(y ~ 1,
y~z,
y ~ z + I(z^2),
y ~ z + I(z^2), + I(z^3))
formulas[2]
lm(y~z, data)
lm(formulas[2], data)
?formula
formulas <- c(y~1,
y~z,
y~z+I(z^2),
y~z+I(z^2)+I(z^3))
formulas[2]
lm(formulas[2], data)
formulas[[2]]
formulas[]
mods <- lapply(formulas[], function(mod) lm(mod, data))
par(mfrow=c(2,2))
for (k in seq_along(formulas)) {
plot_predictions(mods[[k]], newdata, xname="z", ylab="y",
main=as.character(formulas[k]))
points(data$z, data$y, pch=20)
abline(0,2, col=2)
}
par(mfrow=c(1,1))
par(mfrow=c(2,2))
for (k in seq_along(formulas)) {
plot_predictions(mods[[k]], newdata, xname="z", ylab="y",
main=as.character(formulas[k]))
points(data$z, data$y, pch=20)
abline(0,2, col=2)
}
par(mfrow=c(1,1))
?seq_along
?par
styler:::style_active_file()
remotes::install_bitbucket("finnlindgren/FLtools", dep = TRUE)
FLtools::optimisation()
source('~/StatComp/cw2/testing.R', echo=TRUE)
rm(list=ls())
source('~/StatComp/cw2/testing.R', echo=TRUE)
# Import code given
source("CWB2019code.R")
# Import code given
source('CWB2019code.R')
# Import code given
source('cw2/CWB2019code.R')
a <- c(1,2)
a[1]
a[[1]]
a[[[[1]]]]
a[[[1]]]
max(4, 7)
max(a)
lgamma(a+1)
lgamma(a[1])
lgamma(a[1]+1)
lgamma(a[2])
lgamma(a[2]+1)
sum(lgamma(a+1))
sum(lgamma(a+1), 3)
lgamma(2+a[1]+1)
lgamma(2+a[2]+1)
lgamma(2+a+1)
sum(lgamma(2+a+1))
a
a
3*a
3*sum(a)
?optim
View(data)
rm(list=ls())
source('~/StatComp/cw2/testing.R', echo=TRUE)
# Q1.2
op_params <- optim(par = fn = negloglike, Y = c(256, 237))
# Q1.2
op_params <- optim(par = 257, fn = negloglike, Y = c(256, 237))
# Q1.2
op_params <- optim(par = c(257, logit(0.5)), fn = negloglike, Y = c(256, 237))
View(op_params)
rm(list=ls())
source('~/StatComp/cw2/testing.R', echo=TRUE)
op_params
# Obtain estimate of phi
phi_hat <- ilogit(op_params[2])
op_params$par[2]
# Obtain estimate of phi
phi_hat <- ilogit(op_params$par[2])
rm(list=ls())
source('~/StatComp/cw2/testing.R', echo=TRUE)
# Obtain estimate of phi
phi_hat <- ilogit(opt$par[2])
# Q .3
covar <- solve(opt$hessian)
# Q1.3
hess <- optimHess(opt$par, fn = negloglike, Y = c(256, 237))
hess
covar <- solve(hess)
covar
error <- qnorm(0.95)*SE_N/sqrt(opt$par[1])
SE_N <- sqrt(covar[1,1])
error <- qnorm(0.95)*SE_N/sqrt(opt$par[1])
error
qnorm(0.95)
pnorm(0.95)
qnorm(0.025)
qnorm(0.975)
error <- qnorm(0.975)*SE_N
lwr <- opt$par[1]-error
upr <- opt$par[1]+error
lwr
upr
hess <- optimHess(opt$par, fn = negloglike, Y = c(256, 237))
covar <- solve(-hess)
SE_N <- sqrt(covar[1,1])
error <- qnorm(0.975)*SE_N
lwr <- opt$par[1]-error
upr <- opt$par[1]+error
hess <- optimHess(opt$par, fn = negloglike, Y = c(256, 237))
covar <- solve(hess)
SE_N <- sqrt(covar[1,1])
error <- qnorm(0.975)*SE_N
lwr <- opt$par[1]-error
upr <- opt$par[1]+error
error
SE_N
?gamma
a = c(1,2)
(b, c) = a
c(b, c) = a
opt$par
# Q2.2
myhessian <- function(param, Y) {
N <- param[1]
theta <- param[2]
thetatwo <- 2*N*exp(theta)/(1+exp(theta))^2
theta_n <- 2*exp(theta)/(1+exp(theta))
ntwo <- (psigamma(N-Y[1]+1, 1)*gamma(N-Y[1]+1)-(digamma(N-Y[1]+1))^2)
/ (gamma(N-Y[1]+1))^2
+
(psigamma(N-Y[2]+1, 1)*gamma(N-Y[2]+1)-(digamma(N-Y[2]+1))^2)
/ (gamma(N-Y[2]+1))^2
-
2*(psigamma(N+1, 1)*gamma(N+1)-(digamma(N+1))^2)
/ (gamma(N+1))^2
return(matrix(c(ntwo, theta_n, theta_n, thetatwo),nrow=2, ncol=2))
}
myhess <- myhessian(opt$par, Y = c(256, 237))
myhessian <- function(param, Y) {
N <- param[1]
theta <- param[2]
thetatwo <- 2*N*exp(theta)/(1+exp(theta))^2
theta_n <- 2*exp(theta)/(1+exp(theta))
ntwo <- (psigamma(N-Y[1]+1, 1)*gamma(N-Y[1]+1)-(digamma(N-Y[1]+1))^2) / (gamma(N-Y[1]+1))^2
+
(psigamma(N-Y[2]+1, 1)*gamma(N-Y[2]+1)-(digamma(N-Y[2]+1))^2) / (gamma(N-Y[2]+1))^2
-
2*(psigamma(N+1, 1)*gamma(N+1)-(digamma(N+1))^2) / (gamma(N+1))^2
return(matrix(c(ntwo, theta_n, theta_n, thetatwo),nrow=2, ncol=2))
}
myhess <- myhessian(opt$par, Y = c(256, 237))
View(myhess)
View(hess)
